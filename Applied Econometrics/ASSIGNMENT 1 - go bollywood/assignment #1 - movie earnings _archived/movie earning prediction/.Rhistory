quit()
quit()
q()
##Granger Causality Test
##granger.test
library(vars)
library(tseries)
data(EuStockMarkets)
plot(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
dax<-EuStockMarkets[,1]
smi<-EuStockMarkets[,2]
adf.test(dax)
adf.test(smi)
#non-stationary -> take first diff
daxDiff<-diff(dax)
smiDiff<-diff(smi)
adf.test(daxDiff)
adf.test(smiDiff)
#stationary!
#granger test
#null hypo -> no relationship => does smi drive dax
m1<-grangertest(daxDiff~smiDiff) #lag length=1
#reject null since p-value->very small =>
m2<-grangertest(daxDiff~smiDiff, order=2) #lag length=2
#choosing an optimal model
#either derive the AIC or use 2-5 lag
#does dax drive smi
m3<-grangertest(smiDiff~daxDiff)
m4<-grangertest(smiDiff~daxDiff, order=2)
m5<-grangertest(smiDiff~daxDiff, order=3)
m6<-grangertest(smiDiff~daxDiff, order=4)
#note: check out http://www.r-bloggers.com/chicken-or-the-egg-granger-causality-for-the-masses/
###Now, the Ingel Granger method for cointegration -> residual error or gap
model<-lm(dax~smi)  #linear model of prices NOT returns
e<-resid(model)
adf.test(e)
plot(e)
summary(model)
#dax(t)=3.478+0.645smi(t-1) => alpha+beta(t-1) => [3.478 0.645] cointegrating vector
e1<-lag(e) #e(t-1)
d1<-lag(daxDiff) #delta dax(t-1)
s1<-lag(smiDiff) #delta smi(t-1)
length(d1) #1859
length(s1) #1859
length(e1) #1860 => remove the top e
model1<-lm(daxDiff~d1+s1+e1[2:1860])
model2<-lm(smiDiff~d1+s1+e1[2:1860])
##none are adjusting to / driving each other
##try with the other two series
##########################################################################################
### THIS PROGRAM PERFORMS ANALYSIS OF CO-INTEGRATION
### USING THE GRENGER CAUSALITY TEST METHODOLOGY
##########################################################################################
#####load libraries
library(tseries)
library(FinTS)
library(fGarch)
library(forecast)
library(vars)
###############################################
####reading the files
###############################################
gold<-read.table(file.choose(), header=TRUE, sep=",")
usd<-read.table(file.choose(), header=TRUE, sep=",")
data=gold$Spot.Price.in.Rs
data1=usd$USD
###################################################
####fitting time series
####################################################
G=ts(gold[,2],start=c(2014,4),end=c(2015,05),freq=12)
U=ts(usd[,2],start=c(2014,4),end=c(2015,05),freq=12)
gold<-read.table(file.choose(), header=TRUE, sep=",")
usd<-read.table(file.choose(), header=TRUE, sep=",")
data=gold$Spot.Price.in.Rs
data1=usd$USD
###################################################
####fitting time series
####################################################
G=ts(gold[,2],start=c(2014,4),end=c(2015,05),freq=12)
U=ts(usd[,2],start=c(2014,4),end=c(2015,05),freq=12)
par(mfrow=c(2,1),bg="white")
plot(G, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
######################################################
####testing the stationarity through dickey fuller test
#######################################################
adf.test(G)
####Dickey-Fuller = -1.6444, Lag order = 2, p-value = 0.7078
adf.test(U)
#####Dickey-Fuller = 0.074, Lag order = 2, p-value = 0.99
#### both the series are non -stationary
G1=diff(G)
U1=diff(U)
adf.test(G1)
adf.test(U1)
G2=diff(G1)
U2=diff(U1)
adf.test(G2)
adf.test(U2)
plot(G2, main="Gold spot price",xlab="Month", ylab="Gold price")
par(mfrow=c(2,1),bg="white")
plot(G2, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U2, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
grangertest(G2~U2,order=2)
grangertest(G2~U2,order=3)
grangertest(U2~G2,order=2)
###p-value =0.2088
grangertest(U2~G2,order=3)
####p-value=0.3267
#####################################################
###### regressing the Gold price and Exchange rate.
#####################################################
model1=lm(G1~U1)
e=resid(model1) #finding the residual
e1=lag(e)
g1=lag(G2)
u1=lag(U2)
length(G2)
model2=lm(G2~g1+u1+e1[2:13])
summary(model2)
grangertest(G2~U2,order=2)
grangertest(U2~G2,order=3)
grangertest(U2~G2,order=2)
grangertest(U2~G2,order=3)
model1
e
e1
length(G2)
model2
summary(model2)
model2
summary(model2)
##Granger Causality Test
##granger.test
library(vars)
library(tseries)
data(EuStockMarkets)
plot(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
dax<-EuStockMarkets[,1]
smi<-EuStockMarkets[,2]
adf.test(dax)
adf.test(smi)
#non-stationary -> take first diff
daxDiff<-diff(dax)
smiDiff<-diff(smi)
adf.test(daxDiff)
adf.test(smiDiff)
#stationary!
#granger test
#null hypo -> no relationship => does smi drive dax
m1<-grangertest(daxDiff~smiDiff) #lag length=1
#reject null since p-value->very small =>
m2<-grangertest(daxDiff~smiDiff, order=2) #lag length=2
#choosing an optimal model
#either derive the AIC or use 2-5 lag
#does dax drive smi
m3<-grangertest(smiDiff~daxDiff)
m4<-grangertest(smiDiff~daxDiff, order=2)
m5<-grangertest(smiDiff~daxDiff, order=3)
m6<-grangertest(smiDiff~daxDiff, order=4)
#note: check out http://www.r-bloggers.com/chicken-or-the-egg-granger-causality-for-the-masses/
###Now, the Ingel Granger method for cointegration -> residual error or gap
model<-lm(dax~smi)  #linear model of prices NOT returns
e<-resid(model)
adf.test(e)
plot(e)
summary(model)
#dax(t)=3.478+0.645smi(t-1) => alpha+beta(t-1) => [3.478 0.645] cointegrating vector
e1<-lag(e) #e(t-1)
d1<-lag(daxDiff) #delta dax(t-1)
s1<-lag(smiDiff) #delta smi(t-1)
length(d1) #1859
length(s1) #1859
length(e1) #1860 => remove the top e
model1<-lm(daxDiff~d1+s1+e1[2:1860])
model2<-lm(smiDiff~d1+s1+e1[2:1860])
##none are adjusting to / driving each other
model1
summary(model1)
e1
plot(e)
plot(e1)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
e1<-diff(e)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
help(lag)
e1=lag(e)
e
length(e)
e[1:10]
e1=lag(e)
e1[1:10]
##########################################################################################
### THIS PROGRAM PERFORMS ANALYSIS OF CO-INTEGRATION
### USING THE GRENGER CAUSALITY TEST METHODOLOGY
##########################################################################################
#####load libraries
library(tseries)
library(FinTS)
library(fGarch)
library(forecast)
library(vars)
###############################################
####reading the files
###############################################
gold<-read.table(file.choose(), header=TRUE, sep=",")
usd<-read.table(file.choose(), header=TRUE, sep=",")
data=gold$Spot.Price.in.Rs
data1=usd$USD
###################################################
####fitting time series
####################################################
G=ts(gold[,2],start=c(2014,4),end=c(2015,05),freq=12)
U=ts(usd[,2],start=c(2014,4),end=c(2015,05),freq=12)
#####################################################
####plotting the data to find the stationarity
#####################################################
par(mfrow=c(2,1),bg="white")
plot(G, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
######################################################
####testing the stationarity through dickey fuller test
#######################################################
adf.test(G)
####Dickey-Fuller = -1.6444, Lag order = 2, p-value = 0.7078
adf.test(U)
#####Dickey-Fuller = 0.074, Lag order = 2, p-value = 0.99
#### both the series are non -stationary
########################################################
#####find ing the first order differntiation of gold spot price
#####checking the stationarity after differentiation
########################################################
G1=diff(G)
U1=diff(U)
adf.test(G1)
#Dickey-Fuller = -1.6465, Lag order = 2, p-value = 0.7071
adf.test(U1)
#Dickey-Fuller = -1.7919, Lag order = 2, p-value = 0.6516
##########
####differntiated again
G2=diff(G1)
U2=diff(U1)
adf.test(G2)
###Dickey-Fuller = -2.4195, Lag order = 2, p-value = 0.4126
adf.test(U2)
####Dickey-Fuller = -2.3051, Lag order = 2, p-value = 0.4562
par(mfrow=c(2,1),bg="white")
plot(G2, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U2, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
######################################################
#####Granger causality test
#####################################################
grangertest(G2~U2,order=2)
###p-value=0.7706
grangertest(G2~U2,order=3)
####p-value=0.9843
grangertest(U2~G2,order=2)
###p-value =0.2088
grangertest(U2~G2,order=3)
####p-value=0.3267
#####################################################
###### regressing the Gold price and Exchange rate.
#####################################################
model1=lm(G1~U1)
e=resid(model1) #finding the residual
e1=lag(e)
g1=lag(G2)
u1=lag(U2)
length(G2)
model2=lm(G2~g1+u1+e1[2:13])
summary(model2)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
length(e)
e
e1
length(e1)
e1=lag(e)
length(e1)
e=resid(model1) #finding the residual
length(e)
e1=lag(e)
length(e1)
length(e)
length(e1)
e1<-diff(e)
length(e1)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
line(e)
par(mfrow=c(2,1),bg="white")
plot(e, type="o")
plot(e1, type="o")
plot(e, type="l")
plot(e1, type="l")
par(mfrow=c(2,1),bg="white")
plot(e, type="l")
plot(e1, type="l")
e1=lag(e)
length(e1)
par(mfrow=c(2,1),bg="white")
plot(e, type="l")
plot(e1, type="l")
e1=lag(e, k=2)
length(e1)
e
e1
length(G2)
length(g1)
length(u1)
length(e1)
length(U2)
e1=lag(e, k=1)
e1
e
quit()
getwd()
setwd("D:/SONALI - DATA/00000 La Vita Nuova/NISM/PGCDS/TERM 1/003 Applied Econometrics/assignment #1 - movie earnings/movie earning prediction")
ls()
rm(list=ls())
library(AER)
library(glmulti)
data1<-read.csv(".\\Training data.csv",header=T,sep=",")
global.model1<-glmulti(model1,level=1,crit="aicc",method="g")
attach(data1)
model3 <- glmulti(Lifetime~larmA+dirrA+sequel-1,data=data1,crit="aicc",method="g",fitfunc=lm,level=1,maxit=50)
model1<-glm(Lifetime~movies+weekend+holiday+Drama+Romance+Action+sci+Comedy+Biography+Thriller-1,data=data1)
global.model1<-glmulti(model1,level=1,crit="aicc",method="g")
summary(global.model1)
weightable (global.model1)
model3 <- glm(Lifetime~larmA+dirrA+sequel-1)
glmulti(model3,data=data1,crit="aicc",method="g",fitfunc=lm,level=1,maxit=50)
glmulti(model3,crit="aicc",method="g",fitfunc=lm,level=1,maxit=50)
glmulti(model3,crit="aicc")
print(model3)
summary(model3)
weightable(model3)
weightable(model3)
model3 <- glm(Lifetime~larmA+dirrA+sequel-1)
model3<-glmulti(model3,crit="aicc")
summary(model3)
weightable(model3)
rpt1<-summary(model3)
rpt2<-weightable(model3)
rpt1
rpt2
print(model3)
data1<-read.csv(".\\box.csv",header=T,sep=",")
attach(data1)
colnames(data1)
cols<-colnames(data1)
cols
data1<-read.csv(".\\box1.csv",header=T,sep=",")
data1<-read.csv(".\\box1.csv",header=T,sep=",")
attach(data1)
cols<-colnames(data1)
length(cols)
data2<-data1[,-1]
data2
colnames(data2)
data2<-data1[,-3]
colnames(data2)
model1<-lm(Lifetime~data1)
model1<-lm(Lifetime~data2)
data2<-data1[,-1]
colnames(data2)
lmdata<-null
lmdata<-data1[,2]
lmdata<-nulllmdata
lmdata<-data1[,2]
lmdata
for (i in 3:length(cols))
{
lmdata<-cbind(lmdata,data1[,i])
}
lmdata
colnames(lmdata)
model1<-lm(Lifetime~lmdata)
model1
lmdata
model1<-lm(Lifetime~data1)
help(lm)
cols
model1<-lm(Lifetime~cols)
model1<-lm(Lifetime~cols,data=data1)
model1<-lm(Lifetime~data1[,-1],data=data1)
str<-paste(cols)
str
str<-cols[1]
str
str<-cols[2]
str
for (i in 3:length(cols))
{
str<-paste(str,"+",cols[i])
}
str
model1<-lm(Lifetime~str,data=data1)
model1<-lm(Lifetime~movies + holiday + Genre + sequel + larm1 + larf1 + dirr1 + fg + imdb + cr + weeks + spots + channels + grps + tv + reach1 + reach2 + reach3 + trailer + trailerl + trailerd + trailerc + songsv + songsl + songsd + songsc + moviepl + pagepposts + followers + tweets + favourites + searchv + searchc + twitter + comments + news + aggregator + blogs + Videos + sentiP + sentin,data=data1)
summary(model1)
model1<-lm(Lifetime~movies+holiday+Genre+sequel+larm1+larf1+dirr1+fg+imdb+cr+weeks+spots+channels+grps+tv+reach1+reach2+reach3+trailer+trailerl+trailerd+trailerc+songsv+songsl+songsd+songsc+moviepl+pagepposts+followers+tweets+favourites+searchv+searchc+twitter+comments+news+aggregator+blogs+Videos+sentiP+sentin,data=data1)
model1<-lm(Lifetime~movies+holiday+Genre+sequel+larm1+larf1+dirr1+fg+imdb+cr+weeks+spots+channels+grps+tv+reach1+reach2+reach3+trailer+trailerl+trailerd+trailerc+songsv+songsl+songsd+songsc+moviepl+pagepposts+followers+tweets+favourites+searchv+searchc+twitter+comments+news+aggregator+blogs+Videos+sentiP+sentin,data=data1)
data1<-read.csv(".\\box1.csv",header=T,sep=",")
model1<-lm(Lifetime~str,data=data1)
rm(list=ls())
data1<-read.csv(".\\box1.csv",header=T,sep=",")
attach(data1)
cols<-colnames(data1)
#exclude the Lifetime data from the data frame to pass this along to
data2<-data1[,-1]
colnames(data2)
str<-cols[2]
for (i in 3:length(cols))
{
str<-paste(str,"+",cols[i])
}
model1<-lm(Lifetime~movies+holiday+Genre+sequel+larm1+larf1+dirr1+fg+imdb+cr+weeks+spots+channels+grps+tv+reach1+reach2+reach3+trailer+trailerl+trailerd+trailerc+songsv+songsl+songsd+songsc+moviepl+pagepposts+followers+tweets+favourites+searchv+searchc+twitter+comments+news+aggregator+blogs+Videos+sentiP+sentin,data=data1)
summary(model1)
model1<-lm(Lifetime~movies+holiday+Genre+sequel+larm1+larf1+dirr1+fg+imdb+cr+weeks+spots+channels+grps+tv+reach1+reach2+reach3+trailer+trailerl+trailerd+trailerc+songsv+songsl+songsd+songsc+moviepl+pagepposts+followers+tweets+favourites+searchv+searchc+twitter+comments+news+aggregator+blogs+Videos+sentiP+sentin)
summary(model1)
model1<-lm(Lifetime~movies+holiday+Genre+sequel+larm1+larf1+dirr1-1)
summary(model1)
model1<-lm(Lifetime~holiday+Genre+sequel+larm1+larf1+dirr1-1)
summary(model1)
model1<-lm(Lifetime~sequel+larm1+larf1+dirr1-1)
summary(model1)
model1<-lm(Lifetime~sequel+larm1+dirr1-1)
summary(model1)
model1<-glm(Lifetime~sequel+larm1+dirr1-1)
summary(model1)
quit()
getwd()
rm(list=ls())
library(AER)
summary(global.model1)
library(glmulti)
data1<-read.csv(".\\box1.csv",header=T,sep=",")
attach(data1)
help(glm)
