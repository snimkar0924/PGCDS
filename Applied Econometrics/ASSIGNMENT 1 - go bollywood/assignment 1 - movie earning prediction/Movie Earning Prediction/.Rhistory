quit()
quit()
q()
##Granger Causality Test
##granger.test
library(vars)
library(tseries)
data(EuStockMarkets)
plot(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
dax<-EuStockMarkets[,1]
smi<-EuStockMarkets[,2]
adf.test(dax)
adf.test(smi)
#non-stationary -> take first diff
daxDiff<-diff(dax)
smiDiff<-diff(smi)
adf.test(daxDiff)
adf.test(smiDiff)
#stationary!
#granger test
#null hypo -> no relationship => does smi drive dax
m1<-grangertest(daxDiff~smiDiff) #lag length=1
#reject null since p-value->very small =>
m2<-grangertest(daxDiff~smiDiff, order=2) #lag length=2
#choosing an optimal model
#either derive the AIC or use 2-5 lag
#does dax drive smi
m3<-grangertest(smiDiff~daxDiff)
m4<-grangertest(smiDiff~daxDiff, order=2)
m5<-grangertest(smiDiff~daxDiff, order=3)
m6<-grangertest(smiDiff~daxDiff, order=4)
#note: check out http://www.r-bloggers.com/chicken-or-the-egg-granger-causality-for-the-masses/
###Now, the Ingel Granger method for cointegration -> residual error or gap
model<-lm(dax~smi)  #linear model of prices NOT returns
e<-resid(model)
adf.test(e)
plot(e)
summary(model)
#dax(t)=3.478+0.645smi(t-1) => alpha+beta(t-1) => [3.478 0.645] cointegrating vector
e1<-lag(e) #e(t-1)
d1<-lag(daxDiff) #delta dax(t-1)
s1<-lag(smiDiff) #delta smi(t-1)
length(d1) #1859
length(s1) #1859
length(e1) #1860 => remove the top e
model1<-lm(daxDiff~d1+s1+e1[2:1860])
model2<-lm(smiDiff~d1+s1+e1[2:1860])
##none are adjusting to / driving each other
##try with the other two series
##########################################################################################
### THIS PROGRAM PERFORMS ANALYSIS OF CO-INTEGRATION
### USING THE GRENGER CAUSALITY TEST METHODOLOGY
##########################################################################################
#####load libraries
library(tseries)
library(FinTS)
library(fGarch)
library(forecast)
library(vars)
###############################################
####reading the files
###############################################
gold<-read.table(file.choose(), header=TRUE, sep=",")
usd<-read.table(file.choose(), header=TRUE, sep=",")
data=gold$Spot.Price.in.Rs
data1=usd$USD
###################################################
####fitting time series
####################################################
G=ts(gold[,2],start=c(2014,4),end=c(2015,05),freq=12)
U=ts(usd[,2],start=c(2014,4),end=c(2015,05),freq=12)
gold<-read.table(file.choose(), header=TRUE, sep=",")
usd<-read.table(file.choose(), header=TRUE, sep=",")
data=gold$Spot.Price.in.Rs
data1=usd$USD
###################################################
####fitting time series
####################################################
G=ts(gold[,2],start=c(2014,4),end=c(2015,05),freq=12)
U=ts(usd[,2],start=c(2014,4),end=c(2015,05),freq=12)
par(mfrow=c(2,1),bg="white")
plot(G, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
######################################################
####testing the stationarity through dickey fuller test
#######################################################
adf.test(G)
####Dickey-Fuller = -1.6444, Lag order = 2, p-value = 0.7078
adf.test(U)
#####Dickey-Fuller = 0.074, Lag order = 2, p-value = 0.99
#### both the series are non -stationary
G1=diff(G)
U1=diff(U)
adf.test(G1)
adf.test(U1)
G2=diff(G1)
U2=diff(U1)
adf.test(G2)
adf.test(U2)
plot(G2, main="Gold spot price",xlab="Month", ylab="Gold price")
par(mfrow=c(2,1),bg="white")
plot(G2, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U2, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
grangertest(G2~U2,order=2)
grangertest(G2~U2,order=3)
grangertest(U2~G2,order=2)
###p-value =0.2088
grangertest(U2~G2,order=3)
####p-value=0.3267
#####################################################
###### regressing the Gold price and Exchange rate.
#####################################################
model1=lm(G1~U1)
e=resid(model1) #finding the residual
e1=lag(e)
g1=lag(G2)
u1=lag(U2)
length(G2)
model2=lm(G2~g1+u1+e1[2:13])
summary(model2)
grangertest(G2~U2,order=2)
grangertest(U2~G2,order=3)
grangertest(U2~G2,order=2)
grangertest(U2~G2,order=3)
model1
e
e1
length(G2)
model2
summary(model2)
model2
summary(model2)
##Granger Causality Test
##granger.test
library(vars)
library(tseries)
data(EuStockMarkets)
plot(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
dax<-EuStockMarkets[,1]
smi<-EuStockMarkets[,2]
adf.test(dax)
adf.test(smi)
#non-stationary -> take first diff
daxDiff<-diff(dax)
smiDiff<-diff(smi)
adf.test(daxDiff)
adf.test(smiDiff)
#stationary!
#granger test
#null hypo -> no relationship => does smi drive dax
m1<-grangertest(daxDiff~smiDiff) #lag length=1
#reject null since p-value->very small =>
m2<-grangertest(daxDiff~smiDiff, order=2) #lag length=2
#choosing an optimal model
#either derive the AIC or use 2-5 lag
#does dax drive smi
m3<-grangertest(smiDiff~daxDiff)
m4<-grangertest(smiDiff~daxDiff, order=2)
m5<-grangertest(smiDiff~daxDiff, order=3)
m6<-grangertest(smiDiff~daxDiff, order=4)
#note: check out http://www.r-bloggers.com/chicken-or-the-egg-granger-causality-for-the-masses/
###Now, the Ingel Granger method for cointegration -> residual error or gap
model<-lm(dax~smi)  #linear model of prices NOT returns
e<-resid(model)
adf.test(e)
plot(e)
summary(model)
#dax(t)=3.478+0.645smi(t-1) => alpha+beta(t-1) => [3.478 0.645] cointegrating vector
e1<-lag(e) #e(t-1)
d1<-lag(daxDiff) #delta dax(t-1)
s1<-lag(smiDiff) #delta smi(t-1)
length(d1) #1859
length(s1) #1859
length(e1) #1860 => remove the top e
model1<-lm(daxDiff~d1+s1+e1[2:1860])
model2<-lm(smiDiff~d1+s1+e1[2:1860])
##none are adjusting to / driving each other
model1
summary(model1)
e1
plot(e)
plot(e1)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
e1<-diff(e)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
help(lag)
e1=lag(e)
e
length(e)
e[1:10]
e1=lag(e)
e1[1:10]
##########################################################################################
### THIS PROGRAM PERFORMS ANALYSIS OF CO-INTEGRATION
### USING THE GRENGER CAUSALITY TEST METHODOLOGY
##########################################################################################
#####load libraries
library(tseries)
library(FinTS)
library(fGarch)
library(forecast)
library(vars)
###############################################
####reading the files
###############################################
gold<-read.table(file.choose(), header=TRUE, sep=",")
usd<-read.table(file.choose(), header=TRUE, sep=",")
data=gold$Spot.Price.in.Rs
data1=usd$USD
###################################################
####fitting time series
####################################################
G=ts(gold[,2],start=c(2014,4),end=c(2015,05),freq=12)
U=ts(usd[,2],start=c(2014,4),end=c(2015,05),freq=12)
#####################################################
####plotting the data to find the stationarity
#####################################################
par(mfrow=c(2,1),bg="white")
plot(G, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
######################################################
####testing the stationarity through dickey fuller test
#######################################################
adf.test(G)
####Dickey-Fuller = -1.6444, Lag order = 2, p-value = 0.7078
adf.test(U)
#####Dickey-Fuller = 0.074, Lag order = 2, p-value = 0.99
#### both the series are non -stationary
########################################################
#####find ing the first order differntiation of gold spot price
#####checking the stationarity after differentiation
########################################################
G1=diff(G)
U1=diff(U)
adf.test(G1)
#Dickey-Fuller = -1.6465, Lag order = 2, p-value = 0.7071
adf.test(U1)
#Dickey-Fuller = -1.7919, Lag order = 2, p-value = 0.6516
##########
####differntiated again
G2=diff(G1)
U2=diff(U1)
adf.test(G2)
###Dickey-Fuller = -2.4195, Lag order = 2, p-value = 0.4126
adf.test(U2)
####Dickey-Fuller = -2.3051, Lag order = 2, p-value = 0.4562
par(mfrow=c(2,1),bg="white")
plot(G2, main="Gold spot price",xlab="Month", ylab="Gold price")
plot(U2, main="USD-INR Exchange rate",xlab="Month", ylab="Rate in INR")
######################################################
#####Granger causality test
#####################################################
grangertest(G2~U2,order=2)
###p-value=0.7706
grangertest(G2~U2,order=3)
####p-value=0.9843
grangertest(U2~G2,order=2)
###p-value =0.2088
grangertest(U2~G2,order=3)
####p-value=0.3267
#####################################################
###### regressing the Gold price and Exchange rate.
#####################################################
model1=lm(G1~U1)
e=resid(model1) #finding the residual
e1=lag(e)
g1=lag(G2)
u1=lag(U2)
length(G2)
model2=lm(G2~g1+u1+e1[2:13])
summary(model2)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
length(e)
e
e1
length(e1)
e1=lag(e)
length(e1)
e=resid(model1) #finding the residual
length(e)
e1=lag(e)
length(e1)
length(e)
length(e1)
e1<-diff(e)
length(e1)
par(mfrow=c(2,1),bg="white")
plot(e)
plot(e1)
line(e)
par(mfrow=c(2,1),bg="white")
plot(e, type="o")
plot(e1, type="o")
plot(e, type="l")
plot(e1, type="l")
par(mfrow=c(2,1),bg="white")
plot(e, type="l")
plot(e1, type="l")
e1=lag(e)
length(e1)
par(mfrow=c(2,1),bg="white")
plot(e, type="l")
plot(e1, type="l")
e1=lag(e, k=2)
length(e1)
e
e1
length(G2)
length(g1)
length(u1)
length(e1)
length(U2)
e1=lag(e, k=1)
e1
e
quit()
getwd()
setwd("D:/SONALI - DATA/00000 La Vita Nuova/NISM/PGCDS/TERM 1/003 Applied Econometrics/assignment 1 - movie earning prediction/Movie Earning Prediction")
rm(list=ls())
library(glmulti)
boxOfficeData<-read.csv("./data/boxOfficeData_FM.csv", header=TRUE, sep=",")
#dim(boxOfficeData)
attach(boxOfficeData)
cols<-colnames(boxOfficeData)
mod<-lm(Lifetime~larm1+sequel+tv_spend+search_mvkywd-1)
summary(mod)
multi_mod<-glmulti(mod,crit="aicc",level=1)
summary(multi_mod)
weightable(multi_mod)
mod11<lm(Lifetime~larm1+search_mvkywd)
mod11<-lm(Lifetime~larm1+search_mvkywd)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
mod<-lm(Lifetime~sequel+larm1+tv_grps+search_mvkywd-1)
mod<-lm(Lifetime~sequel+larm1+tv_grps+search_mvkywd-1)
summary(mod)
mod3<-lm(Lifetime~larm1+tv_grps+search_mvkywd+tv_grps:larm1+search_mvkywd:larm1+search_mvkywd:tv_grps-1)
summary(mod3)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
multi_mod11<-glmulti(mod11,crit="aicc",level=1)
summary(multi_mod11)
weightable(multi_mod11)
mod3<-lm(Lifetime~larm1+tv_grps+search_mvkywd+tv_grps:larm1+search_mvkywd:larm1+search_mvkywd:tv_grps-1)
summary(mod3)
supMod1<-lm(search_mvkywd~larm1+tv_spend+tv_grps-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~larm1+fb_pagelikes-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~larm1-1)
summary(supMod1)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
supMod1<-lm(search_mvkywd~tv_spend_tv_grps-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~tv_spend_tv_grps-1)
supMod1<-lm(search_mvkywd~tv_spend+tv_grps-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~tv_spend+tv_grps+tv_channels-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~fb_pagelikes-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+yt_trailerlikes-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+fb_pageposts-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+fb_pageposts+tw_follws-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws-1)
summary(supMod1)
mod11<-lm(Lifetime~larm1+yt_trailerviews+tw_follws-1)
summary(mod11)
search_mvkywd
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd+yt_trailerviews+tw_follws-1)
summary(mod11)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+cr-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+reach1-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+sequel-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+larm1-1)
summary(supMod1)
mod11<-lm(Lifetime~larm1+yt_trailerviews+tw_follws-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd+yt_trailerviews+tw_follws-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd+larm1:search_mvkywd-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
mod<-lm(Lifetime~search_mvkywd-1)
summary(mod)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+fg-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws-1)
summary(supMod1)
mod11<-lm(Lifetime~larm1+search_mvkywd+fg-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
mod<-lm(Lifetime~search_mvkywd-1+rad6_twit+rad6_comm+rad6_news+rad6_agg+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN)
summary(mod)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_twit+rad6_comm+rad6_news+rad6_agg+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_twit+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_twit+rad6_comm+rad6_news+rad6_blgs-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_twit+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_twit+rad6_comm+rad6_news+rad6_agg+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_comm+rad6_news+rad6_agg+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_comm+rad6_news+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~yt_trailerviews+tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_twsentiN-1)
summary(supMod1)
supMod1<-lm(search_mvkywd~tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(supMod1)
supMod1Multi<-glmulti(supMod1,level=1,crit="aicc")
summary(supMod1Multi)
weightable(supMod1Multi)
mod<-lm(search_mvkywd ~ 1 + tw_follws + rad6_comm + rad6_news + rad6_blgs + rad6_vds + rad6_twsentiP)
summary(mod)
summary(supMod1)
mod22<-lm(Lifetime~tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN)
summary(mod22)
mod22<-lm(Lifetime~tw_follws+rad6_comm+rad6_news+rad6_blgs+rad6_vds+rad6_twsentiP+rad6_twsentiN-1)
summary(mod22)
mod11<-lm(Lifetime~larm1+search_mvkywd+fg+yt_trailerviews+tw_follws-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd+yt_trailerviews+tw_follws-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd+fg+yt_trailerviews+tw_follws-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd-1)
summary(mod11)
mod11<-lm(Lifetime~larm1+search_mvkywd+fg+yt_trailerviews+tw_follws-1)
summary(mod11)
q()
getwd()
setwd("D:/SONALI - DATA/00000 La Vita Nuova/NISM/PGCDS/TERM 1/003 Applied Econometrics/assignment 1 - movie earning prediction/Movie Earning Prediction")
rm(list=ls())
library(glmulti)
boxOfficeData<-read.csv("./data/boxOfficeData_FM.csv", header=TRUE, sep=",")
#dim(boxOfficeData)
attach(boxOfficeData)
cols<-colnames(boxOfficeData)
mod1<-lm(Lifetime~larm1+search_mvkywd+fg+yt_trailerviews+tw_follws-1)
summary(mod1)
multi_mod1<-glmulti(mod1,crit="aicc",level=1)
summary(multi_mod1)
rpt1<-weightable(multi_mod1)
write.csv(rpt1,file="./data/models.csv")
