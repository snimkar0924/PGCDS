{
    "collab_server" : "",
    "contents" : "\ndat<-read.csv(\"./data/train.csv\")\ndim(dat)\nhead(dat[,1:3])\nstr(dat)\n\nN<-round(nrow(dat)*0.7)\n\n#split data into trainig and validation in 70/30 proportion\ntrnDat<-dat[1:N, ]\nvalDat<-dat[(N+1):nrow(dat), ]\n\ntrnDat<-na.omit(trnDat)\ndim(trnDat)\n\nvars<-colnames(dat) ##interchangeable with trnDat for this purpose\nvars1<-c()\ncou1<-1\nfor (j in 1:length(vars))\n{\n  if (length(unique(trnDat[,vars[j]])) > 1)\n  {\n    vars1[cou1] <- vars[j]\n    cou1 <- cou1 + 1\n  }\n}\n\nl<-length(vars1)-1\n  \nmodels<-vector()\ncou <- 0\n\nfor (i in 2:l)\n{\n  formulaStr<-\"TARGET~%s%-1\"\n  \n  formulaStr<-gsub(formulaStr, pattern=\"%s%\", replacement=vars1[i])\n  print(formulaStr)\n\n  model<-glm(formulaStr, data=trnDat, \n             family=binomial)\n  #summary(model)\n  #str(model)\n  \n  if (as.double(coef(summary(model))[4]) <= 0.05)\n  {\n    cou<- cou + 1\n    models[cou]<-model\n  }\n  \n}#for loop\n\nlength(models)\n\nallFormStr<-\"TARGET~-1\"\nfor (k in 1:length(models))\n{\n  allFormStr<-paste(allFormStr, \"+\", names(models[[k]][1]), sep=\"\")\n}\n\n\nbigmodel<-glm(allFormStr, data=trnDat, \n           family=binomial)\nsummary(bigmodel)\n\ncfs<-(coef(summary(bigmodel)))\n\ncfs1<-cfs[which(cfs[,4] <= 0.05),]\ndim(cfs1)\nrownames(cfs1)[1]\n\nallFormStr<-\"TARGET~-1\"\nfor (k in 1:nrow(cfs1))\n{\n  allFormStr<-paste(allFormStr, \"+\", rownames(cfs1)[k], sep=\"\")\n}\n\nmodel1<-glm(allFormStr, data=trnDat, \n              family=binomial)\nsummary(model1)\n\n\n\n\n\n",
    "created" : 1459055849617.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3066315523",
    "id" : "E16A8F3D",
    "lastKnownWriteTime" : 1459064734,
    "last_content_update" : 1459064734544,
    "path" : "D:/Sonali/000 La Vita Nuova/000 THE HNI/NISM/PGCDS/TERM 2/Data Analytics/Santander Bank/custSatisfy.R",
    "project_path" : "custSatisfy.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}